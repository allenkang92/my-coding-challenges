# 문제 링크 : https://www.acmicpc.net/problem/25704
# 문제 설명:
#   쇼핑몰에서 30일간 진행하는 출석 이벤트에서,
#   경태가 모은 출석 도장의 개수 N에 따라 교환할 수 있는 할인 쿠폰의 종류가 정해진다.
#   쿠폰 종류는 다음과 같다.
#       - 출석 도장 5개   → 500원 할인 쿠폰
#       - 출석 도장 10개 → 10% 할인 쿠폰
#       - 출석 도장 15개 → 2,000원 할인 쿠폰
#       - 출석 도장 20개 → 25% 할인 쿠폰
#
#   쿠폰은 최대 하나만 적용 가능하며, 할인 금액이 물건의 가격보다 더 큰 경우 최종 금액은 0원이 된다.
#   경태가 구매할 물건의 가격 P와 모은 도장 수 N이 주어질 때,
#   적용 가능한 쿠폰들 중 하나를 골라 지불해야 하는 최소 금액을 구하는 문제이다.
#
# 해결 방법:
#   경태는 모은 도장 수에 따라 여러 쿠폰을 사용할 수 있다.
#   (예를 들면, N이 23개이면 5, 10, 15, 20개 쿠폰 모두 사용할 수 있다.)
#   각 쿠폰에 대해 최종 금액을 계산하면 다음과 같다.
#       - 쿠폰 미사용 : P
#       - 5개 쿠폰   : P - 500
#       - 10개 쿠폰  : P - (P * 0.1)
#       - 15개 쿠폰  : P - 2000
#       - 20개 쿠폰  : P - (P * 0.25)
#   이 중 최종 금액이 가장 낮은 것을 선택한다.
#   단, 할인 금액이 물건의 가격보다 큰 경우 최종 금액은 0원이 된다.
#
# 시간/공간 복잡도 : O(1)

N = int(input())
P = int(input())

costs = []

# 쿠폰 미사용의 경우
costs.append(P)

# 각 쿠폰을 적용하는 경우 (사용 가능한 경우에만)
if N >= 5:
    costs.append(P - 500)
if N >= 10:
    costs.append(P - (P * 0.1))
if N >= 15:
    costs.append(P - 2000)
if N >= 20:
    costs.append(P - (P * 0.25))

# 할인 금액이 물건의 가격보다 큰 경우 최종 금액은 0원이므로, 각 경우에 대해 0 이상의 값으로 처리
min_cost = min(max(cost, 0) for cost in costs)
print(int(min_cost))