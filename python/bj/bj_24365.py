# 문제 링크 (주석) : https://www.acmicpc.net/problem/24365
# 간단한 문제 설명: 
#   1. 세 개의 꽃이 일직선상에 1m 간격으로 놓여 있고, 각 꽃에 꿀벌들이 앉아있다.
#   2. 왼쪽 꽃의 꿀벌 수는 가운데 꽃보다 적거나 같고, 가운데 꽃의 꿀벌 수는 오른쪽 꽃보다 적거나 같다.
#   3. 마야 꿀벌은 일부 꿀벌들을 이동시켜 세 꽃에 같은 수의 꿀벌이 앉게 하고 싶다.
#   4. 최소한의 이동 거리(m)를 구하는 문제이다.
#
# 해결 방법 설명:
#   1. 세 꽃에 같은 수의 꿀벌이 앉아야 하므로, 각 꽃에 (A+B+C)/3 마리씩 있어야 한다.
#   2. 최소 이동 거리를 계산하기 위해 위치를 고려해야 함
#   3. 왼쪽 꽃은 위치 0, 가운데 꽃은 위치 1, 오른쪽 꽃은 위치 2라고 할 때,
#      최종 무게중심이 위치 1(가운데 꽃)에 오도록 해야 함
#   4. 이동 전 꿀벌들의 무게중심: (A*0 + B*1 + C*2) / (A+B+C)
#   5. 이동 후 꿀벌들의 무게중심: 1
#   6. 이동 거리 = 무게중심이 이동한 거리 * 전체 꿀벌 수
#
# 시간/공간 복잡도: O(1) - 간단한 계산만 수행함

A, B, C = map(int, input().split())

# 꽃 당 최종 꿀벌 수
target_bees = (A + B + C) // 3

# 계산 방법 1: 무게중심 개념 사용
total_bees = A + B + C
initial_moment = A*0 + B*1 + C*2  # 초기 모멘트
final_moment = total_bees * 1     # 최종 모멘트 (모든 꿀벌이 가운데에 모인 상태의 모멘트)

# 이동 거리 = 모멘트 변화량
moves = abs(final_moment - initial_moment)

print(moves)